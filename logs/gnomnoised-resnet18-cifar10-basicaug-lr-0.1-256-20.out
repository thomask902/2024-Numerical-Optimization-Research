The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) CCconfig        6)  ucx/1.14.1         11) flexiblas/3.3.1
  2) gentoo/2023     7)  libfabric/1.18.0   12) imkl/2023.2.0
  3) gcccore/.12.3   8)  pmix/4.2.4         13) StdEnv/2023
  4) gcc/12.3        9)  ucc/1.2.0
  5) hwloc/2.9.1     10) openmpi/4.1.5
/project/6070520/tkleinkn/Vanilla-GAM/main_cifar.py:223: UserWarning: You have chosen a specific GPU. This will completely disable data parallelism.
  warnings.warn('You have chosen a specific GPU. This will completely '
model name space ['resnet101_c', 'resnet152_c', 'resnet18_c', 'resnet34_c', 'resnet50_c']
Use GPU: 0 for training
=> creating model 'resnet18_c'
Files already downloaded and verified
Files already downloaded and verified
tensorboard dir ./results/CIFAR10/GNOM_noised/basicaug/lr-0.1/batchsize-256/2024-08-18-11:33:42
Using Gradient-Norm Only Minimization with noise (GNOM_noised)
/home/tkleinkn/GAMtest/lib/python3.11/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /home/coulombc/wheels_builder/tmp.2617/python-3.11/torch/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Batch 100, Loss: 3219.5271
Noise applied in 0 out of 196 batches, 0.00
Epoch 1 learning rate: 0.1
Epoch 1 time: 129.02824878692627 seconds
Epoch 1 accuracy: 11.08%
Batch 100, Loss: 54.5562
Noise applied in 0 out of 392 batches, 0.00
Epoch 2 learning rate: 0.1
Epoch 2 time: 111.76189637184143 seconds
Epoch 2 accuracy: 10.94%
Batch 100, Loss: 29.2460
Noise applied in 0 out of 588 batches, 0.00
Epoch 3 learning rate: 0.1
Epoch 3 time: 111.71611523628235 seconds
Epoch 3 accuracy: 10.77%
Batch 100, Loss: 20.6643
Noise applied in 0 out of 784 batches, 0.00
Epoch 4 learning rate: 0.1
Epoch 4 time: 111.66985845565796 seconds
Epoch 4 accuracy: 10.82%
Batch 100, Loss: 17.0827
Noise applied in 0 out of 980 batches, 0.00
Epoch 5 learning rate: 0.1
Epoch 5 time: 111.70151257514954 seconds
Epoch 5 accuracy: 11.06%
Batch 100, Loss: 14.7139
Noise applied in 0 out of 1176 batches, 0.00
Epoch 6 learning rate: 0.1
Epoch 6 time: 111.74562978744507 seconds
Epoch 6 accuracy: 11.43%
Batch 100, Loss: 12.8142
Noise applied in 0 out of 1372 batches, 0.00
Epoch 7 learning rate: 0.1
Epoch 7 time: 111.78154993057251 seconds
Epoch 7 accuracy: 11.72%
Batch 100, Loss: 11.3614
Noise applied in 0 out of 1568 batches, 0.00
Epoch 8 learning rate: 0.1
Epoch 8 time: 111.78099822998047 seconds
Epoch 8 accuracy: 11.58%
Batch 100, Loss: 9.8823
Noise applied in 0 out of 1764 batches, 0.00
Epoch 9 learning rate: 0.1
Epoch 9 time: 111.78476595878601 seconds
Epoch 9 accuracy: 11.26%
Batch 100, Loss: 8.4530
Noise applied in 0 out of 1960 batches, 0.00
Epoch 10 learning rate: 0.1
Epoch 10 time: 111.72793555259705 seconds
Epoch 10 accuracy: 9.93%
Batch 100, Loss: 7.1512
Noise applied in 0 out of 2156 batches, 0.00
Epoch 11 learning rate: 0.1
Epoch 11 time: 111.67658925056458 seconds
Epoch 11 accuracy: 10.51%
Batch 100, Loss: 6.2314
Noise applied in 0 out of 2352 batches, 0.00
Epoch 12 learning rate: 0.1
Epoch 12 time: 111.66802453994751 seconds
Epoch 12 accuracy: 10.25%
Batch 100, Loss: 5.2654
Noise applied in 0 out of 2548 batches, 0.00
Epoch 13 learning rate: 0.1
Epoch 13 time: 111.69521260261536 seconds
Epoch 13 accuracy: 10.18%
Batch 100, Loss: 4.3327
Noise applied in 0 out of 2744 batches, 0.00
Epoch 14 learning rate: 0.1
Epoch 14 time: 111.64635467529297 seconds
Epoch 14 accuracy: 10.0%
Batch 100, Loss: 3.6417
Noise applied in 0 out of 2940 batches, 0.00
Epoch 15 learning rate: 0.1
Epoch 15 time: 111.76404190063477 seconds
Epoch 15 accuracy: 10.17%
Batch 100, Loss: 3.2544
Noise applied in 0 out of 3136 batches, 0.00
Epoch 16 learning rate: 0.1
Epoch 16 time: 111.69178628921509 seconds
Epoch 16 accuracy: 10.01%
Batch 100, Loss: 2.9097
Noise applied in 0 out of 3332 batches, 0.00
Epoch 17 learning rate: 0.1
Epoch 17 time: 111.72185063362122 seconds
Epoch 17 accuracy: 10.11%
Batch 100, Loss: 2.5907
Noise applied in 0 out of 3528 batches, 0.00
Epoch 18 learning rate: 0.1
Epoch 18 time: 111.63523197174072 seconds
Epoch 18 accuracy: 11.4%
Batch 100, Loss: 2.3631
Noise applied in 0 out of 3724 batches, 0.00
Epoch 19 learning rate: 0.1
Epoch 19 time: 111.70686841011047 seconds
Epoch 19 accuracy: 10.25%
Batch 100, Loss: 2.2227
Noise applied in 0 out of 3920 batches, 0.00
Epoch 20 learning rate: 0.1
Epoch 20 time: 111.74240326881409 seconds
Epoch 20 accuracy: 10.76%
rho:  0.04 , alpha:  0.3
Total training time: 2251.6648597717285 seconds
/project/6070520/tkleinkn/Vanilla-GAM/utils/density_plot.py:68: ComplexWarning: Casting complex values to real discards the imaginary part
  density_output[i, j] = np.sum(tmp_result * weights[i, :])
Largest Hessian Eigenvalue: 0.1320
Norm of the Gradient: 1.6066065431e-01
Smallest Hessian Eigenvalue: -0.0119

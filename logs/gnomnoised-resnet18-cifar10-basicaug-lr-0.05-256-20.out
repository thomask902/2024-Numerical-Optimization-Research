The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) CCconfig        6)  ucx/1.14.1         11) flexiblas/3.3.1
  2) gentoo/2023     7)  libfabric/1.18.0   12) imkl/2023.2.0
  3) gcccore/.12.3   8)  pmix/4.2.4         13) StdEnv/2023
  4) gcc/12.3        9)  ucc/1.2.0
  5) hwloc/2.9.1     10) openmpi/4.1.5
/project/6070520/tkleinkn/Vanilla-GAM/main_cifar.py:223: UserWarning: You have chosen a specific GPU. This will completely disable data parallelism.
  warnings.warn('You have chosen a specific GPU. This will completely '
model name space ['resnet101_c', 'resnet152_c', 'resnet18_c', 'resnet34_c', 'resnet50_c']
Use GPU: 0 for training
=> creating model 'resnet18_c'
Files already downloaded and verified
Files already downloaded and verified
tensorboard dir ./results/CIFAR10/GNOM_noised/basicaug/lr-0.05/batchsize-256/2024-08-18-11:33:42
Using Gradient-Norm Only Minimization with noise (GNOM_noised)
/home/tkleinkn/GAMtest/lib/python3.11/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /home/coulombc/wheels_builder/tmp.2617/python-3.11/torch/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Batch 100, Loss: 611.6264
Noise applied in 0 out of 196 batches, 0.00
Epoch 1 learning rate: 0.05
Epoch 1 time: 124.05004167556763 seconds
Epoch 1 accuracy: 12.9%
Batch 100, Loss: 26.6128
Noise applied in 0 out of 392 batches, 0.00
Epoch 2 learning rate: 0.05
Epoch 2 time: 111.78322792053223 seconds
Epoch 2 accuracy: 12.26%
Batch 100, Loss: 14.8295
Noise applied in 0 out of 588 batches, 0.00
Epoch 3 learning rate: 0.05
Epoch 3 time: 111.70728349685669 seconds
Epoch 3 accuracy: 12.33%
Batch 100, Loss: 11.0789
Noise applied in 0 out of 784 batches, 0.00
Epoch 4 learning rate: 0.05
Epoch 4 time: 111.77144408226013 seconds
Epoch 4 accuracy: 11.5%
Batch 100, Loss: 9.1541
Noise applied in 0 out of 980 batches, 0.00
Epoch 5 learning rate: 0.05
Epoch 5 time: 111.74661612510681 seconds
Epoch 5 accuracy: 11.46%
Batch 100, Loss: 7.8463
Noise applied in 0 out of 1176 batches, 0.00
Epoch 6 learning rate: 0.05
Epoch 6 time: 111.78164768218994 seconds
Epoch 6 accuracy: 12.02%
Batch 100, Loss: 6.8708
Noise applied in 0 out of 1372 batches, 0.00
Epoch 7 learning rate: 0.05
Epoch 7 time: 111.72192454338074 seconds
Epoch 7 accuracy: 12.18%
Batch 100, Loss: 5.8111
Noise applied in 0 out of 1568 batches, 0.00
Epoch 8 learning rate: 0.05
Epoch 8 time: 111.77941083908081 seconds
Epoch 8 accuracy: 11.85%
Batch 100, Loss: 5.1692
Noise applied in 0 out of 1764 batches, 0.00
Epoch 9 learning rate: 0.05
Epoch 9 time: 111.78109240531921 seconds
Epoch 9 accuracy: 11.93%
Batch 100, Loss: 4.6523
Noise applied in 0 out of 1960 batches, 0.00
Epoch 10 learning rate: 0.05
Epoch 10 time: 111.89977955818176 seconds
Epoch 10 accuracy: 12.44%
Batch 100, Loss: 4.2318
Noise applied in 0 out of 2156 batches, 0.00
Epoch 11 learning rate: 0.05
Epoch 11 time: 111.79407548904419 seconds
Epoch 11 accuracy: 12.24%
Batch 100, Loss: 3.6894
Noise applied in 0 out of 2352 batches, 0.00
Epoch 12 learning rate: 0.05
Epoch 12 time: 111.71550440788269 seconds
Epoch 12 accuracy: 12.06%
Batch 100, Loss: 3.4963
Noise applied in 0 out of 2548 batches, 0.00
Epoch 13 learning rate: 0.05
Epoch 13 time: 111.76232767105103 seconds
Epoch 13 accuracy: 12.51%
Batch 100, Loss: 3.1957
Noise applied in 0 out of 2744 batches, 0.00
Epoch 14 learning rate: 0.05
Epoch 14 time: 111.69687008857727 seconds
Epoch 14 accuracy: 12.42%
Batch 100, Loss: 3.0333
Noise applied in 0 out of 2940 batches, 0.00
Epoch 15 learning rate: 0.05
Epoch 15 time: 111.76101922988892 seconds
Epoch 15 accuracy: 13.16%
Batch 100, Loss: 2.8743
Noise applied in 0 out of 3136 batches, 0.00
Epoch 16 learning rate: 0.05
Epoch 16 time: 111.86214590072632 seconds
Epoch 16 accuracy: 12.22%
Batch 100, Loss: 2.7134
Noise applied in 0 out of 3332 batches, 0.00
Epoch 17 learning rate: 0.05
Epoch 17 time: 111.74068522453308 seconds
Epoch 17 accuracy: 12.77%
Batch 100, Loss: 2.6471
Noise applied in 0 out of 3528 batches, 0.00
Epoch 18 learning rate: 0.05
Epoch 18 time: 111.75248384475708 seconds
Epoch 18 accuracy: 12.93%
Batch 100, Loss: 2.5390
Noise applied in 0 out of 3724 batches, 0.00
Epoch 19 learning rate: 0.05
Epoch 19 time: 111.80239152908325 seconds
Epoch 19 accuracy: 12.3%
Batch 100, Loss: 2.4527
Noise applied in 0 out of 3920 batches, 0.00
Epoch 20 learning rate: 0.05
Epoch 20 time: 111.78658723831177 seconds
Epoch 20 accuracy: 12.67%
rho:  0.04 , alpha:  0.3
Total training time: 2247.713401079178 seconds
/project/6070520/tkleinkn/Vanilla-GAM/utils/density_plot.py:68: ComplexWarning: Casting complex values to real discards the imaginary part
  density_output[i, j] = np.sum(tmp_result * weights[i, :])
Largest Hessian Eigenvalue: 1.1121
Norm of the Gradient: 2.4710521102e-01
Smallest Hessian Eigenvalue: -0.0382

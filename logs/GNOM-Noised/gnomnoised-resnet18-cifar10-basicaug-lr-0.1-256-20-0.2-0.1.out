The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) CCconfig        6)  ucx/1.14.1         11) flexiblas/3.3.1
  2) gentoo/2023     7)  libfabric/1.18.0   12) imkl/2023.2.0
  3) gcccore/.12.3   8)  pmix/4.2.4         13) StdEnv/2023
  4) gcc/12.3        9)  ucc/1.2.0
  5) hwloc/2.9.1     10) openmpi/4.1.5
/project/6070520/tkleinkn/Vanilla-GAM/main_cifar.py:223: UserWarning: You have chosen a specific GPU. This will completely disable data parallelism.
  warnings.warn('You have chosen a specific GPU. This will completely '
model name space ['resnet101_c', 'resnet152_c', 'resnet18_c', 'resnet34_c', 'resnet50_c']
Use GPU: 0 for training
=> creating model 'resnet18_c'
Files already downloaded and verified
Files already downloaded and verified
tensorboard dir ./results/CIFAR10/GNOM_noised/basicaug/lr-0.1/batchsize-256/2024-08-18-16:55:59
Using Gradient-Norm Only Minimization with noise (GNOM_noised)
/home/tkleinkn/GAMtest/lib/python3.11/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /home/coulombc/wheels_builder/tmp.2617/python-3.11/torch/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Batch 100, Loss: 673.9127
Noise applied in 0 out of 196 batches, 0.00
Epoch 1 learning rate: 0.1
Epoch 1 time: 130.0002715587616 seconds
Epoch 1 accuracy: 10.6%
Batch 100, Loss: 62.5062
Noise applied in 0 out of 392 batches, 0.00
Epoch 2 learning rate: 0.1
Epoch 2 time: 111.7704484462738 seconds
Epoch 2 accuracy: 10.81%
Batch 100, Loss: 35.0549
Noise applied in 0 out of 588 batches, 0.00
Epoch 3 learning rate: 0.1
Epoch 3 time: 111.62732481956482 seconds
Epoch 3 accuracy: 11.59%
Batch 100, Loss: 24.4561
Noise applied in 0 out of 784 batches, 0.00
Epoch 4 learning rate: 0.1
Epoch 4 time: 111.68358206748962 seconds
Epoch 4 accuracy: 11.38%
Batch 100, Loss: 17.9290
Noise applied in 0 out of 980 batches, 0.00
Epoch 5 learning rate: 0.1
Epoch 5 time: 111.58059000968933 seconds
Epoch 5 accuracy: 11.71%
Batch 100, Loss: 14.2427
Noise applied in 0 out of 1176 batches, 0.00
Epoch 6 learning rate: 0.1
Epoch 6 time: 111.56434607505798 seconds
Epoch 6 accuracy: 12.02%
Batch 100, Loss: 11.1768
Noise applied in 0 out of 1372 batches, 0.00
Epoch 7 learning rate: 0.1
Epoch 7 time: 111.58239030838013 seconds
Epoch 7 accuracy: 12.05%
Batch 100, Loss: 9.0591
Noise applied in 0 out of 1568 batches, 0.00
Epoch 8 learning rate: 0.1
Epoch 8 time: 111.66136693954468 seconds
Epoch 8 accuracy: 12.29%
Batch 100, Loss: 7.3814
Noise applied in 0 out of 1764 batches, 0.00
Epoch 9 learning rate: 0.1
Epoch 9 time: 111.62900924682617 seconds
Epoch 9 accuracy: 12.15%
Batch 100, Loss: 5.9740
Noise applied in 0 out of 1960 batches, 0.00
Epoch 10 learning rate: 0.1
Epoch 10 time: 111.58579730987549 seconds
Epoch 10 accuracy: 12.27%
Batch 100, Loss: 4.8593
Noise applied in 0 out of 2156 batches, 0.00
Epoch 11 learning rate: 0.1
Epoch 11 time: 111.63937473297119 seconds
Epoch 11 accuracy: 12.27%
Batch 100, Loss: 4.1641
Noise applied in 0 out of 2352 batches, 0.00
Epoch 12 learning rate: 0.1
Epoch 12 time: 111.60618472099304 seconds
Epoch 12 accuracy: 12.26%
Batch 100, Loss: 3.5895
Noise applied in 0 out of 2548 batches, 0.00
Epoch 13 learning rate: 0.1
Epoch 13 time: 111.61869072914124 seconds
Epoch 13 accuracy: 12.21%
Batch 100, Loss: 3.2485
Noise applied in 1 out of 2744 batches, 0.04
Epoch 14 learning rate: 0.1
Epoch 14 time: 112.32290434837341 seconds
Epoch 14 accuracy: 12.09%
Batch 100, Loss: 2.9614
Noise applied in 12 out of 2940 batches, 0.41
Epoch 15 learning rate: 0.1
Epoch 15 time: 118.67010736465454 seconds
Epoch 15 accuracy: 12.27%
Batch 100, Loss: 2.7405
Noise applied in 47 out of 3136 batches, 1.50
Epoch 16 learning rate: 0.1
Epoch 16 time: 133.42246055603027 seconds
Epoch 16 accuracy: 12.42%
Batch 100, Loss: 2.5674
Noise applied in 109 out of 3332 batches, 3.27
Epoch 17 learning rate: 0.1
Epoch 17 time: 149.66519165039062 seconds
Epoch 17 accuracy: 12.41%
Batch 100, Loss: 2.4354
Noise applied in 222 out of 3528 batches, 6.29
Epoch 18 learning rate: 0.1
Epoch 18 time: 178.23095679283142 seconds
Epoch 18 accuracy: 12.06%
Batch 100, Loss: 2.2935
Noise applied in 361 out of 3724 batches, 9.69
Epoch 19 learning rate: 0.1
Epoch 19 time: 192.31189489364624 seconds
Epoch 19 accuracy: 12.34%
Batch 100, Loss: 2.2064
Noise applied in 535 out of 3920 batches, 13.65
Epoch 20 learning rate: 0.1
Epoch 20 time: 210.53730988502502 seconds
Epoch 20 accuracy: 12.24%
rho:  0.04 , alpha:  0.3
Total training time: 2564.726194381714 seconds
/project/6070520/tkleinkn/Vanilla-GAM/utils/density_plot.py:68: ComplexWarning: Casting complex values to real discards the imaginary part
  density_output[i, j] = np.sum(tmp_result * weights[i, :])
Largest Hessian Eigenvalue: 0.1534
Norm of the Gradient: 1.7517636716e-01
Smallest Hessian Eigenvalue: -0.0295
Noise Threshold: 0.2
Noise Radius: 0.1

The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) CCconfig        6)  ucx/1.14.1         11) flexiblas/3.3.1
  2) gentoo/2023     7)  libfabric/1.18.0   12) imkl/2023.2.0
  3) gcccore/.12.3   8)  pmix/4.2.4         13) StdEnv/2023
  4) gcc/12.3        9)  ucc/1.2.0
  5) hwloc/2.9.1     10) openmpi/4.1.5
/project/6070520/tkleinkn/Vanilla-GAM/main_cifar.py:215: UserWarning: You have chosen a specific GPU. This will completely disable data parallelism.
  warnings.warn('You have chosen a specific GPU. This will completely '
model name space ['resnet101_c', 'resnet152_c', 'resnet18_c', 'resnet34_c', 'resnet50_c']
Use GPU: 0 for training
=> creating model 'resnet18_c'
Files already downloaded and verified
Files already downloaded and verified
tensorboard dir ./results/CIFAR10/SGD/basicaug/lr-0.1/batchsize-128/2024-07-31-15:45:47
Batch 100, Loss: 1.8568
Batch 200, Loss: 1.3938
Batch 300, Loss: 1.2863
Epoch 1 learning rate: 0.05
Epoch 1 time: 31.658802032470703 seconds
Epoch 1 accuracy: 43.88%
Batch 100, Loss: 1.1131
Batch 200, Loss: 1.0605
Batch 300, Loss: 1.0174
Epoch 2 learning rate: 0.0
Epoch 2 time: 25.367544174194336 seconds
Epoch 2 accuracy: 54.44%
rho:  0.04 , alpha:  0.3
Total training time: 57.028310775756836 seconds
Norm of the Gradient: 1.4304484129e+00
/home/tkleinkn/GAMtest/lib/python3.11/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /home/coulombc/wheels_builder/tmp.2617/python-3.11/torch/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/project/6070520/tkleinkn/Vanilla-GAM/utils/density_plot.py:62: ComplexWarning: Casting complex values to real discards the imaginary part
  density_output[i, j] = np.sum(tmp_result * weights[i, :])
The top Hessian eigenvalue of this model is 117.2352

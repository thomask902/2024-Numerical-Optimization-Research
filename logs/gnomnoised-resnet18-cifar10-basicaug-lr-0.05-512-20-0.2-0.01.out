The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) CCconfig        6)  ucx/1.14.1         11) flexiblas/3.3.1
  2) gentoo/2023     7)  libfabric/1.18.0   12) imkl/2023.2.0
  3) gcccore/.12.3   8)  pmix/4.2.4         13) StdEnv/2023
  4) gcc/12.3        9)  ucc/1.2.0
  5) hwloc/2.9.1     10) openmpi/4.1.5
/project/6070520/tkleinkn/Vanilla-GAM/main_cifar.py:223: UserWarning: You have chosen a specific GPU. This will completely disable data parallelism.
  warnings.warn('You have chosen a specific GPU. This will completely '
model name space ['resnet101_c', 'resnet152_c', 'resnet18_c', 'resnet34_c', 'resnet50_c']
Use GPU: 0 for training
=> creating model 'resnet18_c'
Files already downloaded and verified
Files already downloaded and verified
tensorboard dir ./results/CIFAR10/GNOM_noised/basicaug/lr-0.05/batchsize-512/2024-08-18-17:02:19
Using Gradient-Norm Only Minimization with noise (GNOM_noised)
/home/tkleinkn/GAMtest/lib/python3.11/site-packages/torch/autograd/graph.py:744: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at /home/coulombc/wheels_builder/tmp.2617/python-3.11/torch/torch/csrc/autograd/engine.cpp:1203.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
Noise applied in 0 out of 98 batches, 0.00
Epoch 1 learning rate: 0.05
Epoch 1 time: 137.55083799362183 seconds
Epoch 1 accuracy: 11.54%
Noise applied in 0 out of 196 batches, 0.00
Epoch 2 learning rate: 0.05
Epoch 2 time: 106.42782402038574 seconds
Epoch 2 accuracy: 10.52%
Noise applied in 0 out of 294 batches, 0.00
Epoch 3 learning rate: 0.05
Epoch 3 time: 106.53412795066833 seconds
Epoch 3 accuracy: 10.52%
Noise applied in 0 out of 392 batches, 0.00
Epoch 4 learning rate: 0.05
Epoch 4 time: 106.55434608459473 seconds
Epoch 4 accuracy: 10.56%
Noise applied in 0 out of 490 batches, 0.00
Epoch 5 learning rate: 0.05
Epoch 5 time: 106.48756408691406 seconds
Epoch 5 accuracy: 10.4%
Noise applied in 0 out of 588 batches, 0.00
Epoch 6 learning rate: 0.05
Epoch 6 time: 106.45006823539734 seconds
Epoch 6 accuracy: 10.51%
Noise applied in 0 out of 686 batches, 0.00
Epoch 7 learning rate: 0.05
Epoch 7 time: 106.5214855670929 seconds
Epoch 7 accuracy: 10.56%
Noise applied in 0 out of 784 batches, 0.00
Epoch 8 learning rate: 0.05
Epoch 8 time: 106.4476273059845 seconds
Epoch 8 accuracy: 10.69%
Noise applied in 0 out of 882 batches, 0.00
Epoch 9 learning rate: 0.05
Epoch 9 time: 106.56159901618958 seconds
Epoch 9 accuracy: 10.18%
Noise applied in 0 out of 980 batches, 0.00
Epoch 10 learning rate: 0.05
Epoch 10 time: 106.50978922843933 seconds
Epoch 10 accuracy: 9.83%
Noise applied in 0 out of 1078 batches, 0.00
Epoch 11 learning rate: 0.05
Epoch 11 time: 106.53042769432068 seconds
Epoch 11 accuracy: 9.64%
Noise applied in 0 out of 1176 batches, 0.00
Epoch 12 learning rate: 0.05
Epoch 12 time: 106.45454287528992 seconds
Epoch 12 accuracy: 9.65%
Noise applied in 0 out of 1274 batches, 0.00
Epoch 13 learning rate: 0.05
Epoch 13 time: 106.55660796165466 seconds
Epoch 13 accuracy: 9.68%
Noise applied in 0 out of 1372 batches, 0.00
Epoch 14 learning rate: 0.05
Epoch 14 time: 106.56692910194397 seconds
Epoch 14 accuracy: 9.38%
Noise applied in 0 out of 1470 batches, 0.00
Epoch 15 learning rate: 0.05
Epoch 15 time: 106.44008827209473 seconds
Epoch 15 accuracy: 9.49%
Noise applied in 0 out of 1568 batches, 0.00
Epoch 16 learning rate: 0.05
Epoch 16 time: 106.42367601394653 seconds
Epoch 16 accuracy: 9.12%
Noise applied in 0 out of 1666 batches, 0.00
Epoch 17 learning rate: 0.05
Epoch 17 time: 106.44533848762512 seconds
Epoch 17 accuracy: 8.92%
Noise applied in 0 out of 1764 batches, 0.00
Epoch 18 learning rate: 0.05
Epoch 18 time: 106.52463507652283 seconds
Epoch 18 accuracy: 8.91%
Noise applied in 0 out of 1862 batches, 0.00
Epoch 19 learning rate: 0.05
Epoch 19 time: 106.46254014968872 seconds
Epoch 19 accuracy: 8.8%
Noise applied in 0 out of 1960 batches, 0.00
Epoch 20 learning rate: 0.05
Epoch 20 time: 106.48591256141663 seconds
Epoch 20 accuracy: 8.85%
rho:  0.04 , alpha:  0.3
Total training time: 2160.951498270035 seconds
/project/6070520/tkleinkn/Vanilla-GAM/utils/density_plot.py:68: ComplexWarning: Casting complex values to real discards the imaginary part
  density_output[i, j] = np.sum(tmp_result * weights[i, :])
Largest Hessian Eigenvalue: 2.3803
Norm of the Gradient: 4.6785548329e-01
Smallest Hessian Eigenvalue: -0.1062
Noise Threshold: 0.2
Noise Radius: 0.01
